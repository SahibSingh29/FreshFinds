{"ast":null,"code":"var _jsxFileName = \"D:\\\\react_django\\\\frontend\\\\src\\\\components\\\\CardSlider.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"./CardSlider.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CardSlider = () => {\n  _s();\n  const [visible, setVisible] = useState(false);\n  const cardRef = useRef(null);\n  useEffect(() => {\n    const currentRef = cardRef.current; // Store the reference before using it\n\n    if (currentRef) {\n      const observer = new IntersectionObserver(entries => {\n        if (entries[0].isIntersecting) {\n          setVisible(true);\n        }\n      }, {\n        threshold: 0.3\n      });\n      observer.observe(currentRef);\n      return () => {\n        observer.unobserve(currentRef);\n      };\n    }\n  }, []);\n  const cardData = [{\n    id: 1,\n    image: \"/maize.jpg\",\n    title: \"Maize\",\n    desc: \"The soybean, soy bean, or soya bean is a species of legume native to East Asia.\"\n  }, {\n    id: 2,\n    image: \"/wheat.jpg\",\n    title: \"Wheat\",\n    desc: \"The soybean, soy bean, or soya bean is a species of legume native to East Asia.\"\n  }, {\n    id: 3,\n    image: \"/soyabean.jpg\",\n    title: \"Soyabean\",\n    desc: \"The soybean, soy bean, or soya bean is a species of legume native to East Asia.\"\n  }, {\n    id: 4,\n    image: \"/paddy.jpg\",\n    title: \"Paddy\",\n    desc: \"The soybean, soy bean, or soya bean is a species of legume native to East Asia.\"\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      ref: cardRef,\n      children: cardData.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `card ${visible ? \"slide-up\" : \"\"}`,\n        \"data-index\": index,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: card.image,\n          alt: card.title,\n          className: \"card-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: card.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: card.desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, card.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_s(CardSlider, \"nyIQRva9iYdiaHJ0TT4udOubxOg=\");\n_c = CardSlider;\nexport default CardSlider;\nvar _c;\n$RefreshReg$(_c, \"CardSlider\");","map":{"version":3,"names":["React","useEffect","useState","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","CardSlider","_s","visible","setVisible","cardRef","currentRef","current","observer","IntersectionObserver","entries","isIntersecting","threshold","observe","unobserve","cardData","id","image","title","desc","children","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","map","card","index","src","alt","_c","$RefreshReg$"],"sources":["D:/react_django/frontend/src/components/CardSlider.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport \"./CardSlider.css\";\r\n\r\nconst CardSlider = () => {\r\n  const [visible, setVisible] = useState(false);\r\n  const cardRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const currentRef = cardRef.current; // Store the reference before using it\r\n  \r\n    if (currentRef) {\r\n      const observer = new IntersectionObserver(\r\n        (entries) => {\r\n          if (entries[0].isIntersecting) {\r\n            setVisible(true);\r\n          }\r\n        },\r\n        { threshold: 0.3 }\r\n      );\r\n  \r\n      observer.observe(currentRef);\r\n  \r\n      return () => {\r\n        observer.unobserve(currentRef);\r\n      };\r\n    }\r\n  }, []);  \r\n\r\n  const cardData = [\r\n    { id: 1, image: \"/maize.jpg\", title: \"Maize\", desc: \"The soybean, soy bean, or soya bean is a species of legume native to East Asia.\" },\r\n    { id: 2, image: \"/wheat.jpg\", title: \"Wheat\", desc: \"The soybean, soy bean, or soya bean is a species of legume native to East Asia.\" },\r\n    { id: 3, image: \"/soyabean.jpg\", title: \"Soyabean\", desc: \"The soybean, soy bean, or soya bean is a species of legume native to East Asia.\" },\r\n    { id: 4, image: \"/paddy.jpg\", title: \"Paddy\", desc: \"The soybean, soy bean, or soya bean is a species of legume native to East Asia.\" },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n    <div>\r\n      \r\n    </div>\r\n    <div className=\"card-container\" ref={cardRef}>\r\n      {cardData.map((card, index) => (\r\n        <div key={card.id} className={`card ${visible ? \"slide-up\" : \"\"}`} data-index={index}>\r\n          <img src={card.image} alt={card.title} className=\"card-img\" />\r\n          <h3>{card.title}</h3>\r\n          <p>{card.desc}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardSlider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}