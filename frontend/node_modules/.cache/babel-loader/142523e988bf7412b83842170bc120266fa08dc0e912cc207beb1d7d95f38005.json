{"ast":null,"code":"var _jsxFileName = \"D:\\\\react_django\\\\frontend\\\\src\\\\components\\\\CropForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CropForm() {\n  _s();\n  const [formData, setFormData] = useState({\n    N: '',\n    P: '',\n    K: '',\n    temperature: '',\n    humidity: '',\n    ph: '',\n    rainfall: ''\n  });\n  const [result, setResult] = useState('');\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://localhost:8000/api/recommend-crop/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setResult(data.recommended_crop);\n      } else {\n        setResult(`Error: ${data.error}`);\n      }\n    } catch (err) {\n      setResult('Server error. Try again later.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Crop Recommendation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall'].map(field => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [field, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          step: \"any\",\n          name: field,\n          value: formData[field],\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this)]\n      }, field, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Get Recommendation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), result && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Recommended Crop: \", result]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n_s(CropForm, \"LatnjNddI/WYuCg7/RK15323TQU=\");\n_c = CropForm;\nexport default CropForm;\nvar _c;\n$RefreshReg$(_c, \"CropForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CropForm","_s","formData","setFormData","N","P","K","temperature","humidity","ph","rainfall","result","setResult","handleChange","e","target","name","value","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","ok","recommended_crop","error","err","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","field","type","step","onChange","required","_c","$RefreshReg$"],"sources":["D:/react_django/frontend/src/components/CropForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction CropForm() {\r\n    const [formData, setFormData] = useState({\r\n        N: '',\r\n        P: '',\r\n        K: '',\r\n        temperature: '',\r\n        humidity: '',\r\n        ph: '',\r\n        rainfall: ''\r\n    });\r\n    const [result, setResult] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        setFormData({...formData, [e.target.name]: e.target.value});\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const response = await fetch('http://localhost:8000/api/recommend-crop/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(formData)\r\n            });\r\n\r\n            const data = await response.json();\r\n            if (response.ok) {\r\n                setResult(data.recommended_crop);\r\n            } else {\r\n                setResult(`Error: ${data.error}`);\r\n            }\r\n        } catch (err) {\r\n            setResult('Server error. Try again later.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Crop Recommendation</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                {['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall'].map(field => (\r\n                    <div key={field}>\r\n                        <label>{field}:</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            step=\"any\"\r\n                            name={field}\r\n                            value={formData[field]}\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </div>\r\n                ))}\r\n                <button type=\"submit\">Get Recommendation</button>\r\n            </form>\r\n            {result && <h3>Recommended Crop: {result}</h3>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CropForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC;IACrCO,CAAC,EAAE,EAAE;IACLC,CAAC,EAAE,EAAE;IACLC,CAAC,EAAE,EAAE;IACLC,WAAW,EAAE,EAAE;IACfC,QAAQ,EAAE,EAAE;IACZC,EAAE,EAAE,EAAE;IACNC,QAAQ,EAAE;EACd,CAAC,CAAC;EACF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMgB,YAAY,GAAIC,CAAC,IAAK;IACxBX,WAAW,CAAC;MAAC,GAAGD,QAAQ;MAAE,CAACY,CAAC,CAACC,MAAM,CAACC,IAAI,GAAGF,CAAC,CAACC,MAAM,CAACE;IAAK,CAAC,CAAC;EAC/D,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOJ,CAAC,IAAK;IAC9BA,CAAC,CAACK,cAAc,CAAC,CAAC;IAClB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;QACtEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACxB,QAAQ;MACjC,CAAC,CAAC;MAEF,MAAMyB,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,IAAIR,QAAQ,CAACS,EAAE,EAAE;QACbjB,SAAS,CAACe,IAAI,CAACG,gBAAgB,CAAC;MACpC,CAAC,MAAM;QACHlB,SAAS,CAAC,UAAUe,IAAI,CAACI,KAAK,EAAE,CAAC;MACrC;IACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVpB,SAAS,CAAC,gCAAgC,CAAC;IAC/C;EACJ,CAAC;EAED,oBACIb,OAAA;IAAAkC,QAAA,gBACIlC,OAAA;MAAAkC,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5BtC,OAAA;MAAMuC,QAAQ,EAAEpB,YAAa;MAAAe,QAAA,GACxB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,aAAa,EAAE,UAAU,EAAE,IAAI,EAAE,UAAU,CAAC,CAACM,GAAG,CAACC,KAAK,iBACnEzC,OAAA;QAAAkC,QAAA,gBACIlC,OAAA;UAAAkC,QAAA,GAAQO,KAAK,EAAC,GAAC;QAAA;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACvBtC,OAAA;UACI0C,IAAI,EAAC,QAAQ;UACbC,IAAI,EAAC,KAAK;UACV1B,IAAI,EAAEwB,KAAM;UACZvB,KAAK,EAAEf,QAAQ,CAACsC,KAAK,CAAE;UACvBG,QAAQ,EAAE9B,YAAa;UACvB+B,QAAQ;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACX,CAAC;MAAA,GATIG,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUV,CACR,CAAC,eACFtC,OAAA;QAAQ0C,IAAI,EAAC,QAAQ;QAAAR,QAAA,EAAC;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC,EACN1B,MAAM,iBAAIZ,OAAA;MAAAkC,QAAA,GAAI,oBAAkB,EAACtB,MAAM;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEd;AAACpC,EAAA,CA5DQD,QAAQ;AAAA6C,EAAA,GAAR7C,QAAQ;AA8DjB,eAAeA,QAAQ;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}